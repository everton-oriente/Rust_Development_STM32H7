# [doc = r" The RTIC application module"] pub mod app {# [doc = r" Always include the device crate which contains the vector table"] use stm32_hal :: stm32 as you_must_enable_the_rt_feature_for_the_pac_in_your_cargo_toml ; use defmt :: info ; # [doc = r" User code from within the module"] # [doc = r" User code end"] # [doc = " User provided init function"] # [inline (always)] # [allow (non_snake_case)] fn init (_ : init :: Context) -> (Shared , Local , init :: Monotonics) {info ! ("init") ; (Shared {} , Local {} , init :: Monotonics ())} # [doc = " User provided idle function"] # [allow (non_snake_case)] fn idle (_ : idle :: Context) -> ! {use rtic :: Mutex as _ ; use rtic :: mutex :: prelude :: * ; info ! ("idle") ; loop {}} # [doc = " RTIC shared resource struct"] struct Shared {} # [doc = " RTIC local resource struct"] struct Local {} # [doc = r" Monotonics used by the system"] # [allow (non_snake_case)] # [allow (non_camel_case_types)] pub struct __rtic_internal_Monotonics () ; # [doc = r" Execution context"] # [allow (non_snake_case)] # [allow (non_camel_case_types)] pub struct __rtic_internal_init_Context < 'a > {# [doc = r" Core (Cortex-M) peripherals"] pub core : rtic :: export :: Peripherals , # [doc = r" Device peripherals"] pub device : stm32_hal :: stm32 :: Peripherals , # [doc = r" Critical section token for init"] pub cs : rtic :: export :: CriticalSection < 'a > ,} impl < 'a > __rtic_internal_init_Context < 'a > {# [doc (hidden)] # [inline (always)] pub unsafe fn new (core : rtic :: export :: Peripherals ,) -> Self {__rtic_internal_init_Context {device : stm32_hal :: stm32 :: Peripherals :: steal () , cs : rtic :: export :: CriticalSection :: new () , core ,}}} # [allow (non_snake_case)] # [doc = " Initialization function"] pub mod init {# [doc (inline)] pub use super :: __rtic_internal_Monotonics as Monotonics ; # [doc (inline)] pub use super :: __rtic_internal_init_Context as Context ;} # [doc = r" Execution context"] # [allow (non_snake_case)] # [allow (non_camel_case_types)] pub struct __rtic_internal_idle_Context < > {} impl < > __rtic_internal_idle_Context < > {# [doc (hidden)] # [inline (always)] pub unsafe fn new (priority : & rtic :: export :: Priority) -> Self {__rtic_internal_idle_Context {}}} # [allow (non_snake_case)] # [doc = " Idle loop"] pub mod idle {# [doc (inline)] pub use super :: __rtic_internal_idle_Context as Context ;} # [doc = r" App module"] # [doc (hidden)] # [allow (non_upper_case_globals)] const __rtic_internal_MASK_CHUNKS : usize = rtic :: export :: compute_mask_chunks ([]) ; # [doc (hidden)] # [allow (non_upper_case_globals)] const __rtic_internal_MASKS : [rtic :: export :: Mask < __rtic_internal_MASK_CHUNKS > ; 3] = [rtic :: export :: create_mask ([]) , rtic :: export :: create_mask ([]) , rtic :: export :: create_mask ([])] ; # [doc (hidden)] mod rtic_ext {use super :: * ; # [no_mangle] unsafe extern "C" fn main () -> ! {const _CONST_CHECK : () = {if ! rtic :: export :: have_basepri () {} else {}} ; let _ = _CONST_CHECK ; rtic :: export :: interrupt :: disable () ; let mut core : rtic :: export :: Peripherals = rtic :: export :: Peripherals :: steal () . into () ; # [inline (never)] fn __rtic_init_resources < F > (f : F) where F : FnOnce () {f () ;} __rtic_init_resources (|| {let (shared_resources , local_resources , mut monotonics) = init (init :: Context :: new (core . into ())) ; rtic :: export :: interrupt :: enable () ;}) ; idle (idle :: Context :: new (& rtic :: export :: Priority :: new (0)))}}}